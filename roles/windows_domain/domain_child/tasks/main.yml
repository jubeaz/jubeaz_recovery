#- name: Password
#  debug: 
#    var: parent_domain_password
#- name: DomSafePassword
#  debug: 
#    var: domain_password
#- name: ParentDomainName
#  debug: 
#    var: parent_domain
#- name: ReplicationSourceDC
#  debug: 
#    var: source_dc
#- name: NewDomainNetbiosName
#  debug: 
#    var: netbios_name
#- name: NewDomainName
#  debug: 
#    var: domain.split('.')[0]
    

#- name: params
#  debug: 
#    msg: 
#      - "$Password='{{parent_domain_password}}'"
#      - "$DomSafePassword='{{domain_password}}'"
#      - "$DomainAdmin='Administrator@{{parent_domain}}'"
#      - "$ParentDomainName='{{parent_domain}}'"
#      - "$NewDomainNetbiosName='{{source_dc}}'"
#      - "$NewDomainNetbiosName='{{netbios_name}}'"
#      - "$NewDomainName='{{domain.split('.')[0]}}'"
#      - "dns_domain: {{hostvars[dns_domain].ansible_host}}"
#
#- name: debug 
#  ansible.builtin.fail:
#    msg: stop.

- name: "disable the registration of the {{nat_adapter}} interface (NAT address) in DNS"
  ansible.windows.win_shell: Get-NetAdapter {{nat_adapter}} | Set-DNSClient -RegisterThisConnectionsAddress $False
  when: two_adapters == true

- name: debug
  ansible.builtin.debug:
    msg:
      - "domain_parent_source_dc: {{domain_parent_dc_name}}.{{domain_parent_domain_name}}"
      - "domain_parent_dc_ip: {{domain_parent_dc_ip}}"

- name: "Set configure dns to {{domain_parent_dc_name}} {{domain_parent_dc_ip}}"
  win_dns_client:
    adapter_names: "{{domain_adapter}}"
    ipv4_addresses:
      - "{{domain_parent_dc_ip}}"
    log_path: C:\dns_log.txt

#- name: fail
#  ansible.builtin.fail:
#    msg: STOP

- name: Install windows features - AD Domain Services
  win_feature:
    name: AD-Domain-Services
    state: present
    include_management_tools: yes
    include_sub_features: yes
  register: features_adds


- name: Install windows features - RSAT-ADDS
  win_feature:
    name: RSAT-ADDS
    state: present
    include_management_tools: yes
  register: features_rsat

- name: features | Installing Windows DNS Server
  win_feature:
    name: DNS
    state: present
    include_management_tools: yes
    include_sub_features: yes
  register: features_dns

# DNSCHANGE
# - name: "disable interface {{nat_adapter}} before join domain"
#   win_shell: netsh interface set interface "{{nat_adapter}}" disable

#- name: Reboot
#  win_reboot:
#    reboot_timeout: 900
#    post_reboot_delay: 100
#  when: features_dns.reboot_required or features_rsat.reboot_required or features_adds.reboot_required

- name: add child domain to parent domain
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $Password,

          [String]
          $DomainAdmin,

          [String]
          $ParentDomainName,

          [String]
          $NewDomainNetbiosName,

          [String]
          $ReplicationSourceDC,

          [String]
          $NewDomainName,

          [String]
          $DomSafePassword
      )

      $domainExist=$false
      try {
          $child_domain = Get-ADDomain -Identity $NewDomainName
          $domainExist=$true
      } catch {
          $domainExist=$false
      }
      if (-not $domainExist) {
        $Ansible.Changed = $true
        $pass = ConvertTo-SecureString $Password -AsPlainText -Force 
        $Cred = New-Object System.Management.Automation.PSCredential ($DomainAdmin, $pass)
        $safePassword = ConvertTo-SecureString $DomSafePassword -AsPlainText -Force
        Install-ADDSDomain -Credential $Cred -SkipPreChecks -NewDomainName $NewDomainName -NewDomainNetbiosName $NewDomainNetbiosName -ParentDomainName $ParentDomainName -ReplicationSourceDC $ReplicationSourceDC -DatabasePath "C:\Windows\NTDS" -SYSVOLPath "C:\Windows\SYSVOL" -LogPath "C:\Windows\Logs" -SafeModeAdministratorPassword $safePassword -Force -NoRebootOnCompletion
      } else {
        $Ansible.Changed = $false
      }
    parameters:
      Password: "{{domain_parent_domain_password}}"
      DomSafePassword: "{{domain_password}}"
      DomainAdmin: "Administrator@{{domain_parent_domain_name}}"
      ParentDomainName: "{{domain_parent_domain_name}}"
      ReplicationSourceDC: "{{domain_parent_dc_name}}.{{domain_parent_domain_name}}"
      NewDomainNetbiosName: "{{domain_netbios_name}}"
      NewDomainName: "{{domain_netbios_name | lower}}"
  register: child_result



- name: Reboot
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100
  when: child_result.changed

- name: check child creation
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $NewDomainName
      )

      try {
          $child_domain = Get-ADDomain -Identity $NewDomainName
          $Ansible.Failed=$false
      } catch {
          $Ansible.Failed=$true
      }
    parameters:
      NewDomainName: "{{domain_netbios_name}}"
  register: child_result

# - name: "enable interface {{nat_adapter}} after domain joined"
#   win_shell: netsh interface set interface "{{nat_adapter}}" enable
#   register: enable_interface
#   until: "enable_interface is not failed"
#   retries: 3
#   delay: 120

- name: enable the {{domain_adapter}} interface (local) for DNS client requests
  ansible.windows.win_shell: Get-NetAdapter {{nat_adapter}} | Set-DNSClient -RegisterThisConnectionsAddress $True
  when: two_adapters == true

- name: "Install XactiveDirectory"
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present

