# DNSCHANGE
# - name: "disable interface {{nat_adapter}} before join domain"
#   win_shell: netsh interface set interface "{{nat_adapter}}" disable

- name: "disable the registration of the {{nat_adapter}} interface (NAT address) in DNS"
  ansible.windows.win_shell:
    Get-NetAdapter {{nat_adapter | ansible.windows.quote(shell='powershell')}} | Set-DNSClient -RegisterThisConnectionsAddress $False
  when: two_adapters == true

- name: Ensure that domain exists
  microsoft.ad.domain:
    domain_netbios_name: "{{domain_netbios_name}}"
    dns_domain_name: "{{domain_name}}"
    safe_mode_password: "{{domain_password}}"
    reboot: true
  register: check_domain

- name: Ensure the server is a domain controller
  microsoft.ad.domain_controller:
    dns_domain_name: "{{domain_name}}"
    domain_admin_user: "Administrator@{{domain_name}}"
    domain_admin_password: "{{domain_password}}"
    safe_mode_password: "{{domain_password}}"
    install_dns: true
    reboot: true
    state: domain_controller
  register: check_domain_controller


# Add-DnsServerResourceRecordA -Name "host23" -ZoneName "contoso.com" -AllowUpdateAny -IPv4Address "172.18.99.23" -TimeToLive 01:00:00

#  Get-DnsServerSetting


- name: "Set DS DNS to listen on {{domain_dc_ip}} (domain)" 
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $IP
      )
      Import-Module ActiveDirectory
      Set-Location AD:

      try {
        $s= Get-DnsServerSetting -ALL
        $s.ListeningIpAddress = @($IP)
        Set-DNSServerSetting $s
        $Ansible.Failed = $false
      } catch {
        $Ansible.Failed = $true
        $message = $_
        Write-Warning "Something happened! $message"
      }
    error_action: stop
    parameters:
      IP: "{{domain_dc_ip}}"
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: "{{domain_name}}\\Administrator"
    ansible_become_password: "{{domain_password}}"
  register: set_dns_server_ip

- name: "Set DS DNS to listen on {{domain_dc_ip}} (domain)" 
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $IP
      )
      Import-Module ActiveDirectory
      Set-Location AD:

      try {
        $s= Get-DnsServerSetting -ALL
        $s.ListeningIpAddress = @($IP)
        Set-DNSServerSetting $s
        $Ansible.Failed = $false
      } catch {
        $Ansible.Failed = $true
        $message = $_
        Write-Warning "Something happened! $message"
      }
    error_action: stop
    parameters:
      IP: "{{domain_dc_ip}}"
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: "{{domain_name}}\\Administrator"
    ansible_become_password: "{{domain_password}}"
  register: set_dns_server_listeningip

- name: Reboot
  win_reboot:
    reboot_timeout: 900
    post_reboot_delay: 100

- name: Retrieve DNS Server config
  win_shell: |
    $obj = Get-DnsServerSetting
    Write-Output  $obj
  register: get_dns_server_listeningip


- name: Show DNS Server config
  debug: 
    var: "{{get_dns_server_listeningip}}"


- name: Check for xDnsServer Powershell module
  win_psmodule:
    name: xDnsServer
    state: present

- name: enable only the {{domain_adapter}} interface (local) for DNS client requests
  ansible.windows.win_shell: dnscmd . /resetlistenaddresses {{ ansible_host }}
  when: two_adapters == true


- name: Configure DNS Forwarders
  win_dsc:
    resource_name: xDnsServerForwarder
    IsSingleInstance: "yes"
    UseRootHint: false
    IPAddresses:
      - "1.1.1.1"
      - "9.9.9.9"


- name: "Install XactiveDirectory"
  win_psmodule:
    name: ActiveDirectoryDSC
    state: present

- name: Ensure Administrator is part of Enterprise Admins
  microsoft.ad.group:
    name: "Enterprise Admins"
    members:
      add:
        - Administrator
    state: present

- name: Ensure Administrator is part of Domain Admins
  microsoft.ad.group:
    name: "Domain Admins"
    members:
      add: 
        - Administrator
    state: present