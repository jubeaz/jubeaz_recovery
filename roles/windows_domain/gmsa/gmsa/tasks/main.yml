# $gMSA_Name = 'gmsaWWW'
# $gMSA_FQDN = 'gmsaWWW.contoso.com'
# $gMSA_SPNs = 'http/www', 'http/www.contoso.com'
# $gMSA_HostNames = 'webServer01', 'webServer02', 'webServer03'


### ADD A TASK TO CHECK IF GMSA EXISTS BEFORE
- name: Create GMSA Account
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $gMSA_Name,

          [String]
          $gMSA_FQDN,

          [String[]]
          $gMSA_SPNs,

          [String[]]
          $gMSA_HostNames,

          [String[]]
          $gMSA_Groups
      )
      Import-Module ActiveDirectory
      Set-Location AD:
      try {
        $obj = Get-ADServiceAccount -Identity $gMSA_Name
        $Ansible.Failed = $false
        $Ansible.changed = $false
      } catch {
        try {
          $gMSA_Principals =  @()
          Add-KDSRootKey -EffectiveTime (Get-Date).AddHours(-10)
          $gMSA_Principals += $gMSA_HostNames | ForEach-Object { Get-ADComputer -Identity $_ }
          $gMSA_Principals += $gMSA_Groups | ForEach-Object { Get-ADGroup -Identity $_ }
          $obj = New-ADServiceAccount -Name $gMSA_Name -DNSHostName $gMSA_FQDN -PrincipalsAllowedToRetrieveManagedPassword $gMSA_Principals -ServicePrincipalNames $gMSA_SPNs 
          Write-Output -InputObject $obj
          $Ansible.Failed = $false
        } catch {
          $Ansible.Failed = $true
          $message = $_
          Write-Warning "Something happened! $message"
        }
      }
    parameters:
      gMSA_Name: "{{item.value.gMSA_Name}}"
      gMSA_FQDN: "{{item.value.gMSA_FQDN}}"
      gMSA_SPNs: "{{item.value.gMSA_SPNs}}"
      gMSA_HostNames: "{{item.value.gMSA_HostNames | default([])}}"
      gMSA_Groups: "{{item.value.gMSA_Groups | default([])}}"
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: "{{domain_name}}\\Administrator"
    ansible_become_password: "{{domain_password}}"
  with_dict: "{{ objects }}"
  when: action |default('create') != "add_delegates"
  register:  gmsa_account_result


# read msDS-AllowedToActOnBehalfOfOtherIdentity
# $id = "CN=janus,CN=Managed Service Accounts,DC=haas,DC=local"
# $id = (get-adserviceaccount -identity janus).DistinguishedName
# $id = (get-ADUser -identity janus).DistinguishedName
# (ActiveDirectory\Get-ADObject -Identity $Id -properties msDS-AllowedToActOnBehalfOfOtherIdentity).'msDS-AllowedToActOnBehalfOfOtherIdentity'.Access

- name: Add Ressource Based Constained Delegation
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $gMSA_Name,

          [String[]]
          $delegates
      )

      Import-Module ActiveDirectory
      Set-Location AD:
      try {
        $Principals = @()
        $Principals += $delegates | ForEach-Object { ActiveDirectory\Get-ADObject  -Identity $_ }
        Write-Output $Principals
        Set-ADServiceAccount -identity $gMSA_Name -PrincipalsAllowedToDelegateToAccount $Principals
        $Ansible.Failed = $false
      } catch {
        $Ansible.Failed = $true
        $message = $_
        Write-Warning "Something happened! $message"
      }
    parameters:
      gMSA_Name: "{{item.value.gMSA_Name}}"
      delegates: "{{item.value.delegates | default([])}}"
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: "{{domain_name}}\\Administrator"
    ansible_become_password: "{{domain_password}}"
  with_dict: "{{ objects }}"
  when: action |default('create') == "add_delegates"  and item.value.delegates | default([]) | length > 0
  register:  gmsa_delegation_result
