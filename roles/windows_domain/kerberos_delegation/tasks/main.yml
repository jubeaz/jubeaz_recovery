# KCD with protocol transition:
#     - UAC :
#         - TrustedForDelegation:       false
#         - TrustedToAuthForDelegation: true
#     - msDS-AllowedToDelegateTo:       list of SPN
# 
# KCD without protocol transition:
#     - UAC :
#         - TrustedForDelegation:       false
#         - TrustedToAuthForDelegation: false
#     - msDS-AllowedToDelegateTo:       list of SPN
# KUD:
#     - UAC :
#         - TrustedForDelegation:       true
#         - TrustedToAuthForDelegation: false
#     - msDS-AllowedToDelegateTo:       empty
# RBCD: 
#     - msDS-AllowedToActOnBehalfOfOtherIdentity:  list of DN
#
#
# RBCD IS NOT MANAGED WILL BE MANAGED DURING OBJECT CREATION


- name: Create Kerberos Delegation 
  ansible.windows.win_powershell:
    script: |
      [CmdletBinding()]
      param (
          [String]
          $Id,
          [String]
          $DelegationType,
          [String]
          $ProtoTransition,
          [String[]]
          $DelegateTo
      )
      Import-Module ActiveDirectory
      Set-Location AD:

      try {
        $obj = ActiveDirectory\Get-ADObject -Identity $Id
        Write-Output "Object Found: $obj"
        if($DelegationType -eq "KUD"){
          $TrustedForDeleg = $true
          $TrustedToAuth = $false
          $type = "KUD"
        }
        if($DelegationType -eq "KCD" -And $ProtoTransition -eq $true){
          $TrustedForDeleg = $true
          $TrustedToAuth = $true
          $type = "KCD(pt)"
        }
        if($DelegationType -eq "KCD" -And $ProtoTransition -eq $false){
          $TrustedForDeleg = $false
          $TrustedToAuth = $false
          $type = "KCD"
        }        
        # object UAC
        Set-ADAccountControl $obj -TrustedForDelegation $TrustedForDeleg -TrustedToAuthForDelegation $TrustedToAuth
        Write-Output "[$type] Set-ADAccountControl: -TrustedForDelegation $TrustedForDeleg -TrustedToAuthForDelegation $TrustedToAuth"
      
        if ($DelegationType -eq "KCD"){
          $obj | Set-ADObject -Add @{"msDS-AllowedToDelegateTo"=$DelegateTo}
          Write-Output "Set msDS-AllowedToDelegateTo $DelegateTo"
        } else {
          $obj | Set-ADObject -Clear 'msDS-AllowedToDelegateTo'
          Write-Output "Cleared msDS-AllowedToDelegateTo"
        }      
        $Ansible.Failed = $false
      } catch {
        $Ansible.Failed = $true
        $message = $_
        Write-Warning "Something happened! $message"
      }
    error_action: stop
    parameters:
      Id: "CN={{item.key}},{{item.value.path}}"
      DelegationType: "{{item.value.delegation_type}}"
      ProtoTransition: "{{item.value.proto_transition | default(false)}}"
      DelegateTo: "{{item.value.constrained | default([])}}"
  vars:
    ansible_become: yes
    ansible_become_method: runas
    ansible_become_user: "{{domain_name}}\\Administrator"
    ansible_become_password: "{{domain_password}}"
  when: item.value.delegation_type | default(false) != false
  with_dict: "{{ objects | default({})}}"
  register: kerberos_delegations

#- debug:
#    var: kerberos_delegations