
#"StefanScherer/windows_10"
#"StefanScherer/windows_11"
#"StefanScherer/windows_2019"
#"gusztavvargadr/windows-10"
#"gusztavvargadr/windows-11"
#"gusztavvargadr/windows-server-core"
#"gusztavvargadr/windows-server"
#"archlinux/archlinux"

# pour VBS 
# passer en virtio network card
  # download the latest stable of windows driver https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso
  # switch network card on virtualbox
  # remove E1G6032E.sys or offending drivers


Vagrant.configure("2") do |config|
  # Uncomment this depending on the provider you want to use
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
  #ENV['VAGRANT_DEFAULT_PROVIDER'] = 'vmware_desktop'
  net_defs = { 
  	haas:     {name: "haas",     mask: "255.255.255.0", network: "172.17.0.0", gw: "172.17.0.254"},
  	weyland:  {name: "weyland",  mask: "255.255.255.0", network: "172.17.1.0", gw: "172.17.1.254"},
  	research: {name: "research", mask: "255.255.255.0", network: "172.17.2.0", gw: "172.17.2.254"},
    bridge: {name: "br0", mask: "255.255.255.0", network: "192.168.2.0", gw: "192.168.2.1"}
#    bridge: {name: "br1", mask: "255.255.255.0", network: "192.168.58.0", gw: "192.168.2.1"}
  }
  
  boxes = [
    { 
      # only internal
      bname: "nord", 
      ip_p: "192.168.2.16", 
  	  net: net_defs[:bridge], 
      #box: "gusztavvargadr/windows-11", 
      #box_version: "2302.0.2409", 
      box: "gusztavvargadr/windows-server", 
      os: "windows", 
      ram: 8192, 
      cpu: 4,
      forwarded_port:[ 
        #{guest: 22, host: 2222, id: "ssh"},
        #{guest: 3389, host: 53389, id: "tcp53389"},
        #{guest: 5985, host: 55986, id: "winrm"},
        #{guest: 5986, host: 55985, id: "winrm-ssl"}
      ]
      
    }
  ]

  # disable rdp forwarded port inherited from gusztavvargadr box
  config.vm.network :forwarded_port, guest: 3389, host: 53389, id: "tcp53389", auto_correct: true, disabled: true
  # no autoupdate if vagrant-vbguest is installed
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10
  config.winrm.transport = "plaintext"
  config.winrm.basic_auth_only = true

  boxes.each do |box|
    config.vm.define box[:bname] do |target|
      #Â BOX
      target.vm.provider "virtualbox" do |v|
        v.memory = box[:ram]
        v.name = box[:bname]
        v.cpus = box[:cpu]
        v.customize ["modifyvm", :id, '--audio-driver', 'alsa', '--audio-controller', 'hda', '--audio-enabled', 'on']
        v.customize ["modifyvm", :id, '--vram', '128']
        v.customize ["modifyvm", :id, '--nested-hw-virt', 'on']
        v.customize ["modifyvm", :id, '--firmware', 'efi64']
        v.customize ["modifynvram", :id, 'inituefivarstore']
        v.customize ["modifynvram", :id, 'enrollorclpk']
        v.customize ["modifynvram", :id, 'enrollmssignatures']
        # Enrolls the default Microsoft KEK and DB signatures required for UEFI secure boot. 
        # VBoxManage modifynvram <uuid|vmname> enrollmssignatures 
        #vboxmanage modifyvm $vm_name --firmware efi64 
        #VBoxManage modifynvram $vm_name inituefivarstore
        #vboxmanage modifynvram $vm_name enrollmssignatures
        #vboxmanage modifynvram $vm_name enrollorclpk

      end
      # Download image
      target.vm.box_download_insecure = box[:box]
      target.vm.box = box[:box]
      if box.has_key?(:box_version)
        target.vm.box_version = box[:box_version]
      end

      # issues/49
      target.vm.synced_folder '.', '/vagrant', disabled: true
      target.vm.synced_folder 'shared/', '/shared', disabled: true

      # Windows specific
      target.vm.guest = :windows
      target.vm.communicator = "winrm"
      #AMD PCNet FAST III (Am79C973)
      ##  alway provision an internal network on Ethernet 2
      #n_info = box[:net]
      ## target.vm.network :private_network, ip: box[:ip], virtualbox__intnet: n_info[:name]
      #target.vm.network :private_network, ip: box[:ip]

      #target.vm.provision :shell, :path => "../scripts/fix_ip.ps1", privileged: false, args: ["Ethernet 2", box[:ip], n_info[:mask], n_info[:gw]]
      if box.has_key?(:ip_p)
        n_info_p = net_defs[:bridge]
        #  Provision a public interface if needed on Ethernet 3 
        target.vm.network :public_network, bridge: n_info_p[:name], ip: box[:ip_p]
        target.vm.provision :shell, :path => "../../scripts/all_in_one.ps1", privileged: false, args: ["-IFName", "Ethernet 2", "-IP", box[:ip_p], "-Mask", n_info_p[:mask], "-Gateway", n_info_p[:gw]]
      else
        target.vm.provision :shell, :path => "../../scripts/all_in_one.ps1", privileged: false
      end
      
      if box.has_key?(:forwarded_port)
        # forwarded port explicit
        box[:forwarded_port] do |forwarded_port|
          target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
        end
      end
    end
  end
end