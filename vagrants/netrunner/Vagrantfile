
#"StefanScherer/windows_10"
#"StefanScherer/windows_11"
#"StefanScherer/windows_2019"
#"gusztavvargadr/windows-server-core"
#"gusztavvargadr/windows-server"
#"archlinux/archlinux"


Vagrant.configure("2") do |config|
  # Uncomment this depending on the provider you want to use
  ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'
  #ENV['VAGRANT_DEFAULT_PROVIDER'] = 'vmware_desktop'

  net_defs = { 
  	haas:     {name: "haas",     mask: "255.255.255.0", network: "172.16.0.0", gw: "172.16.0.254"},
  	weyland:  {name: "weyland",  mask: "255.255.255.0", network: "172.16.1.0", gw: "172.16.1.254"},
  	research: {name: "research", mask: "255.255.255.0", network: "172.16.2.0", gw: "172.16.2.254"}
  }

  boxes = [
    { 
      name: "nrunner_fw", 
    	nets: [
    		{
    			ip: "172.16.0.254",
          net: net_defs[:haas], 
    		},
    		{
    			ip: "172.16.1.254",
          net: net_defs[:weyland], 
    		},
    		{
    			ip: "172.16.2.254",
          net: net_defs[:research], 
    		}
    	],
      ip_p: "192.168.2.100",
      mask_p: "255.255.255.0", 
  	  gw: "192.168.2.1",
      box: "archlinux/archlinux", 
      box_version: "20240103.204422", 
      os: "arch", 
      ram: 2048, 
      cpu: 2
    },
    { 
      # internal and public
      name: "nrunner_srv01", 
      ip: "172.16.0.11", 
  	  net: net_defs[:haas], 
      ip_p: "192.168.2.101",
      mask_p: "255.255.255.0", 
      box: "gusztavvargadr/windows-server", 
      box_version: "2102.0.2310", 
      os: "windows", 
      ram: 4096, 
      cpu: 2
    },
    { 
      # internal and public
      name: "nrunner_srv02", 
      ip: "172.16.0.12", 
  	  net: net_defs[:haas], 
      box: "gusztavvargadr/windows-server", 
      box_version: "2102.0.2310", 
      os: "windows", 
      ram: 4096, 
      cpu: 2
    },
    { 
      # internal and public
      name: "nrunner_dc03", 
      ip: "172.16.0.1", 
  	  net: net_defs[:haas], 
      box: "gusztavvargadr/windows-server", 
      box_version: "2102.0.2310", 
      os: "windows", 
      ram: 4096, 
      cpu: 2
    },
    { 
      # only internal
      name: "nrunner_dc01", 
      ip: "172.16.1.1", 
  	  net: net_defs[:weyland], 
      box: "gusztavvargadr/windows-server", 
      box_version: "2102.0.2310", 
      os: "windows", 
      ram: 4096, 
      cpu: 2
    },
    { 
      # only internal
      name: "nrunner_dc02", 
      ip: "172.16.2.1", 
  	  net: net_defs[:research], 
      box: "gusztavvargadr/windows-server", 
      box_version: "2102.0.2310", 
      os: "windows", 
      ram: 4096, 
      cpu: 2
    }
  ]

  #config.vm.provider "virtualbox" do |v|
  #  v.cpus = 2
  #end

  # disable rdp forwarded port inherited from StefanScherer box
  config.vm.network :forwarded_port, guest: 3389, host: 3389, id: "rdp", auto_correct: true, disabled: true
  # no autoupdate if vagrant-vbguest is installed
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  config.winrm.retry_limit = 30
  config.winrm.retry_delay = 10
  config.winrm.transport = "plaintext"
  config.winrm.basic_auth_only = true

  boxes.each do |box|
    config.vm.define box[:name] do |target|
      #Â BOX
      target.vm.provider "virtualbox" do |v|
        v.memory = box[:ram]
        v.name = box[:name]
        v.cpus = 2
      end
      # Download image
      target.vm.box_download_insecure = box[:box]
      target.vm.box = box[:box]
      if box.has_key?(:box_version)
        target.vm.box_version = box[:box_version]
      end

      # issues/49
      target.vm.synced_folder '.', '/vagrant', disabled: true
      target.vm.synced_folder 'shared/', '/shared', disabled: true

      # Windows specific
      if box[:os] == "windows"
        target.vm.guest = :windows
        target.vm.communicator = "winrm"
        #  alway provision an internal network on Ethernet 2
        n_info = box[:net]
        target.vm.network :private_network, ip: box[:ip], virtualbox__intnet: n_info[:name]
        if box.has_key?(:ip_p)
          #  Provision a public interface if needed on Ethernet 3 
          target.vm.network :public_network, bridge: 'br0', ip: box[:ip_p]
          target.vm.provision :shell, :path => "fix_ip.ps1", privileged: false, args: [box[:ip], n_info[:mask], n_info[:gw], box[:ip_p], box[:mask_p]]
        else
          target.vm.provision :shell, :path => "fix_ip.ps1", privileged: false, args: [box[:ip], n_info[:mask], n_info[:gw],"None", "None"]
        end
  #        target.vm.provision :shell, :path => "../scripts/fix_ip.ps1", privileged: false, args: [box[:ip], box[:mask], box[:gw], box[:ip_i], box[:mask_i]]
        target.vm.provision :shell, :path => "../scripts/Install-WMF3Hotfix.ps1", privileged: false
        target.vm.provision :shell, :path => "../scripts/ConfigureRemotingForAnsible.ps1", privileged: false
      end
      # Arch specific
      if box[:os] == "arch"
        # Provision a public interface on eth1	
        target.vm.network :public_network, bridge: 'br0', ip: box[:ip_p]
        target.vm.communicator = "ssh"
        # Provision internal networks
        box[:nets].each do |bn|
          n_info = bn[:net]
          puts "  Provision Network #{n_info[:name]} with IP #{bn[:ip]}"
          target.vm.network :private_network, ip: bn[:ip], virtualbox__intnet: n_info[:name]
        end
        target.vm.provision :shell, :path => "fix_ip.sh", privileged: true, args: [box[:gw]]
      end

      if box.has_key?(:forwarded_port)
        # forwarded port explicit
        box[:forwarded_port] do |forwarded_port|
          target.vm.network :forwarded_port, guest: forwarded_port[:guest], host: forwarded_port[:host], host_ip: "127.0.0.1", id: forwarded_port[:id]
        end
      end
    end
  end
end
