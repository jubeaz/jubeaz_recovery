---
# tasks file for vault
- include_tasks: variables.yml
- include_tasks: asserts.yml

- include_tasks: ubuntu.yml
  when: ansible_distribution == "Ubuntu"
- include_tasks: arch.yml
  when: ansible_distribution == "Archlinux"

- include_tasks: configure.yml

- name: Get installed packages
  package_facts:
    manager: "auto"

- name: Open firewall ports
  ufw:
    rule: allow
    direction: in
    src: "{{ hvault_ufw_from }}"
    to_port: "{{ hvault_port }}"
  when: "'ufw' in ansible_facts.packages"

- name: Create unseal directories
  file:
    path: "{{ _hvault_keys_dir }}/{{ inventory_hostname }}"
    state: directory
    owner: root
    group: root
    mode: "0700"
  delegate_to: localhost

- name: Create root key directories
  file:
    path: "{{ _hvault_token_dir }}/{{ inventory_hostname }}"
    state: directory
    owner: root
    group: root
    mode: "0700"
  delegate_to: localhost

- name: Try init Vault
  block:
    - name: Initialise Vault operator
      command: vault operator init -key-shares=5 -key-threshold=3 -format json
      environment:
        VAULT_ADDR: "http://127.0.0.1:8200"
      register: _vault_init_results
  rescue:
    - name: Set init failed
      set_fact:
        _vault_init_results: ""

- name: Get init results
  block:
    - name: Parse output of vault init
      set_fact:
        vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"

    - name: Write unseal keys to files
      copy:
        dest: "{{ _hvault_keys_dir }}/{{ inventory_hostname }}/unseal_key_{{ item.0 }}"
        content: "{{ item.1 }}"
        owner: root
        group: root
        mode: "0600"
      with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
      delegate_to: localhost

    - name: Write root token to file
      copy:
        content: "{{ vault_init_parsed.root_token }}"
        dest: "{{ _hvault_token_dir }}/{{ inventory_hostname }}/rootkey"
        owner: root
        group: root
        mode: "0600"
      delegate_to: localhost
  when: _vault_init_results != ""
  no_log: true
